REST constraints:
	Uniform interface
	Client Server separtion 
	Stateless : State is transfered in request/response
	Layered System : Clinet -> Outer layer
	Cacheable
	Code on demand (optional)

URI:
	noun/id/noun/id, noun = plural

Error Codes return
	200
	400
	500

Creating Controller
	Inherit from ControllerBase, add [ApiController] attribute
Getting Resource 
	Use ActionResult<T>
	Seperate repo and dto (model)
	Use automapper

	Parent/Child relation
		create child request to course based on author 

	Handling fault
		Exception handling defined in the pipeline by creating termination middlware (addExceptionHandler)
		Supporting HttpHead

	Searching Filtering
		Done by using querystring

Creating Resource
	Dto object must be created for each operation

Parameters binding
	by default it using the parameter datatype and its matching uri
	ComplexType (class) be default it's [FormBody]
	We can create custom bindings for [FromRoute] -> CustomModelBinding
		Depends how you want to get the values from, query string, header, route 


Validationg Input
	Multipleways :
		Implement IValidateable in dto class
		Create custom Data annotation
		Data annotation will be run first before the IValidateable method

Returning Validation Error
	Based on RFC7807 but not all info are available

Updating Resource
PUT - Full
Validation can be different between creation and updating	
	Data annotation if overide it still keeps  the parent method data annotation
	Upserting 
PATCH - Partial